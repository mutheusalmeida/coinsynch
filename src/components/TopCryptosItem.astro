---
import arrowFlatIcon from '@/assets/arrow-flat-icon.svg'
import { Image } from '@astrojs/image/components'
import { formatCurrency, getVariationRate } from '@/utils'

type Props = {
  name: string
  url: string
  id: string
  index: number
}

type DataType = {
  rate: number
  variation: string
}

const { name, url, id, index } = Astro.props

const currentRateResponse = await fetch(
  `${import.meta.env.COINAPI_BASE_URL}/exchangerate/${id}/USD`,
  {
    headers: { 'X-CoinAPI-Key': import.meta.env.COINAPI_KEY },
  }
)

const oldRateResponse = await fetch(
  `${
    import.meta.env.COINAPI_BASE_URL
  }/exchangerate/${id}/USD/history?period_id=1DAY&limit=1`,
  {
    headers: { 'X-CoinAPI-Key': import.meta.env.COINAPI_KEY },
  }
)

const currentRateData = await currentRateResponse.json()

const oldRateData = await oldRateResponse.json()

const mock = {
  rate: 0.9996882567431848,
  variation: '+0.873',
}

const asset: DataType = [currentRateData, oldRateData]
  .flat()
  .reduce((acc, curr) => {
    if ('rate' in curr) {
      return {
        ...acc,
        rate: curr.rate,
      }
    }

    if ('rate' in acc && 'rate_close' in curr) {
      return {
        ...acc,
        variation: getVariationRate(acc.rate, curr.rate_close),
      }
    }

    return {
      ...acc,
    }
  }, {})
---

<div data-id={id} data-js="crypto-expandable" class="crypto-expandable">
  <div data-js="toggle" class="cryptos-tbody__header">
    <div class="cryptos-tbody__crypto">
      <Image
        class="cryptos-tbody__crypto-icon"
        width={32}
        height={32}
        src={url}
        quality={1}
        alt="Crypto icon"
      />

      <h4 class="cryptos-tbody__crypto-name">
        {name}
        <span>{id}</span>
      </h4>
    </div>

    <Image
      data-js="arrow-icon"
      class="cryptos-tbody__arrow"
      width={16}
      height={16}
      src={arrowFlatIcon}
      alt="Arrow icon"
    />
  </div>

  <div data-js="expander" class="expander">
    <div class="expander-content">
      <div class="cryptos-tbody__details">
        <div>
          <span class="cryptos-thead__th">Price</span>

          <span class="cryptos-tbody__td"
            >US {formatCurrency(asset.rate || mock.rate)}</span
          >
        </div>

        <div>
          <span class="cryptos-thead__th">Change</span>

          <span
            class:list={[
              'cryptos-tbody__td',
              {
                'cryptos-tbody__td--rise': asset.variation
                  ? asset.variation.startsWith('+')
                  : mock.variation.startsWith('+'),
                'cryptos-tbody__td--drop': asset.variation
                  ? asset.variation.startsWith('-')
                  : mock.variation.startsWith('-'),
              },
            ]}>{asset.variation || mock.variation}</span
          >
        </div>
      </div>
    </div>
  </div>
</div>

<div class="crypto-column">
  <span class="crypto-column__index">{index > 9 ? index : `0${index}`}</span>

  <div class="cryptos-tbody__crypto">
    <Image
      class="cryptos-tbody__crypto-icon"
      width={32}
      height={32}
      src={url}
      quality={1}
      alt="Crypto icon"
    />

    <h4 class="cryptos-tbody__crypto-name">
      {name}
      <span>{id}</span>
    </h4>
  </div>

  <span class="cryptos-tbody__td"
    >US {formatCurrency(asset.rate || mock.rate)}</span
  >

  <span
    class:list={[
      'cryptos-tbody__td',
      {
        'cryptos-tbody__td--rise': asset.variation
          ? asset.variation.startsWith('+')
          : mock.variation.startsWith('+'),
        'cryptos-tbody__td--drop': asset.variation
          ? asset.variation.startsWith('-')
          : mock.variation.startsWith('-'),
      },
    ]}>{asset.variation || mock.variation}</span
  >

  <button class="cryptos-tbody__btn">Buy</button>
</div>

<style>
  .cryptos-tbody__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1em;
    cursor: pointer;
  }

  .cryptos-thead__th {
    font-size: 0.75rem;
    color: var(--gray-500);
    line-height: var(--line-height-14);
  }

  .cryptos-tbody__crypto-icon {
    width: 1.5em;
    height: 1.5em;
  }

  .cryptos-tbody__crypto {
    display: flex;
    align-items: center;
    gap: 0.5em;
  }

  .cryptos-tbody__crypto-name {
    font-size: 0.75rem;
    font-weight: 400;
    line-height: var(--line-height-14-base-12);

    & span {
      color: var(--gray-500);
    }
  }

  .cryptos-tbody__arrow {
    transform: rotate(90deg);
    transition: transform 0.2s ease-in;
  }

  .cryptos-tbody__arrow.rotated {
    transform: rotate(-90deg);
  }

  .cryptos-tbody__header.border-bottom {
    border-bottom: 1px solid var(--gray-200);
  }

  .cryptos-tbody__details {
    display: flex;
    flex-direction: column;
    padding: 1em;
    gap: 1em;

    & > div {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  }

  .cryptos-tbody__td {
    font-size: 0.875rem;
    line-height: var(--line-height-14);
  }

  .cryptos-tbody__td--rise {
    color: var(--green-700);
  }

  .cryptos-tbody__td--drop {
    color: var(--red-700);
  }

  .crypto-column {
    display: none;
  }

  .crypto-column__index {
    color: var(--gray-500);
  }

  .cryptos-tbody__btn,
  .crypto-column__index {
    font-size: 0.875rem;
    line-height: var(--line-height-14);
  }

  .cryptos-tbody__btn {
    display: flex;
    padding: 0.5714em 1.1428em;
    background-color: var(--green-700);
    color: var(--white);
    min-width: 5.7142em;
    max-width: max-content;
    border: none;
    border-radius: 7.1428em;
    justify-content: center;
    transition:
      color,
      background-color 0.2s ease;
    cursor: pointer;
  }

  .cryptos-tbody__btn:hover {
    background-color: var(--green-800);
    color: var(--gray-200);
  }

  @media (min-width: 48em) {
    .crypto-expandable {
      display: none;
    }

    .cryptos-thead__th {
      font-size: 0.875rem;
      color: var(--gray-500);
      line-height: var(--line-height-16);
    }

    .cryptos-tbody__crypto-icon {
      width: 2em;
      height: 2em;
    }

    .cryptos-tbody__crypto {
      display: flex;
      gap: 1em;
    }

    .cryptos-tbody__crypto-name {
      font-size: 1rem;
      line-height: var(--line-height-24);
    }

    .cryptos-tbody__td {
      font-size: 1rem;
      line-height: var(--line-height-24);
    }

    .crypto-column {
      display: grid;
      grid-template-columns: 1fr 4fr 3fr 2fr 5em;
      padding: 1em 1.5em;
      align-items: center;
    }
  }

  @media (min-width: 90em) {
    .crypto-column {
      grid-template-columns: 1fr 2fr 2fr 2fr 5em;
    }
  }
</style>

<script define:vars={{ id }}>
  const cryptoNodes = document.querySelectorAll('[data-js="crypto-expandable"]')

  cryptoNodes.forEach((crypto) => {
    if (crypto.dataset.id === id) {
      const toggle = crypto?.querySelector('[data-js="toggle"]')
      const expander = crypto?.querySelector('[data-js="expander"]')
      const arrowIcon = crypto?.querySelector('[data-js="arrow-icon"]')

      if (toggle && expander) {
        toggle.addEventListener('click', () => {
          expander.classList.toggle('expanded')
          toggle.classList.toggle('border-bottom')
          arrowIcon?.classList.toggle('rotated')
        })
      }
    }
  })
</script>
